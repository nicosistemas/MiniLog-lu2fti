from flask import Flask, render_template, request, redirect, send_file
import csv
import os
from datetime import datetime, timezone

app = Flask(__name__)

# Variables para mantener el último modo y frecuencia
last_mode = ''
last_frequency = ''

# Funciones para leer y escribir el operador ID
def save_operator_id(op_id):
    with open('operator_id.txt', 'w') as f:
        f.write(op_id)

def load_operator_id():
    if os.path.exists('operator_id.txt'):
        with open('operator_id.txt', 'r') as f:
            return f.read().strip()
    else:
        return 'LU2FTI'  # Valor por defecto

# Cargar el operator_id al iniciar la app
operator_id = load_operator_id()

# Función para obtener la banda según la frecuencia
def get_band(frequency):
    try:
        frequency = float(frequency)
    except ValueError:
        return "UNKNOWN"

    if 1.8 <= frequency < 2.0:
        return "160m"
    elif 3.5 <= frequency < 4.0:
        return "80m"
    elif 5.0 <= frequency < 5.5:
        return "60m"
    elif 7.0 <= frequency < 7.3:
        return "40m"
    elif 10.1 <= frequency < 10.15:
        return "30m"
    elif 14.0 <= frequency < 14.35:
        return "20m"
    elif 18.068 <= frequency < 18.168:
        return "17m"
    elif 21.0 <= frequency < 21.45:
        return "15m"
    elif 24.89 <= frequency < 24.99:
        return "12m"
    elif 28.0 <= frequency < 29.7:
        return "10m"
    elif 50.0 <= frequency < 54.0:
        return "6m"
    elif 144.0 <= frequency < 148.0:
        return "2m"
    elif 430.0 <= frequency < 450.0:
        return "70cm"
    else:
        return "UNKNOWN"

@app.route('/', methods=['GET', 'POST'])
def index():
    global last_mode, last_frequency, operator_id
    if request.method == 'POST':
        # Actualizamos el ID del operador
        if 'operator_id' in request.form and request.form['operator_id']:
            operator_id = request.form['operator_id']
            save_operator_id(operator_id)

        contact_id = request.form['id']
        mode = request.form['mode']
        frequency = request.form['frequency']
        extra = request.form['extra']
        date = datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')

        last_mode = mode
        last_frequency = frequency

        with open('contacts.csv', 'a', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow([date, contact_id, mode, frequency, extra, operator_id])
        return redirect('/')

    contacts = []
    if os.path.exists('contacts.csv'):
        with open('contacts.csv', newline='') as csvfile:
            reader = csv.reader(csvfile)
            contacts = list(reader)

    return render_template('index.html', contacts=contacts, last_mode=last_mode, last_frequency=last_frequency, operator_id=operator_id)

@app.route('/export')
def export():
    global operator_id

    contacts = []
    if os.path.exists('contacts.csv'):
        with open('contacts.csv', newline='') as csvfile:
            reader = csv.reader(csvfile)
            contacts = list(reader)

    if not operator_id:
        operator_id = 'UNKNOWN'

    current_time = datetime.now().strftime("%Y%m%d-%H%M%S")
    filename = f"contacts-{current_time}.adi"

    adi_content = "Generated by MiniLog by LU2FTI\n"
    for c in contacts:
        if len(c) < 6:
            print(f"Skipping incomplete contact entry: {c}")
            continue

        band = get_band(c[3])
        extra = c[4] if len(c) > 4 else ''
        qso_date = c[0].split()[0].replace("-", "")

        try:
            time_on = datetime.strptime(c[0], '%Y-%m-%d %H:%M:%S').strftime('%H%M%S')
        except ValueError:
            time_on = '000000'

        adi_content += f"<CALLSIGN_STATION:{len(operator_id)}>{operator_id} <CALL:{len(c[1])}>{c[1]} <QSO_DATE:{len(qso_date)}>{qso_date} <TIME_ON:{len(time_on)}>{time_on} <BAND:{len(band)}>{band} <FREQ:{len(c[3])}>{c[3]} <MODE:{len(c[2])}>{c[2]} <EXTRA:{len(extra)}>{extra}\n"

    if adi_content.strip() == "Generated by MiniLog by LU2FTI":
        return "No hay contactos para exportar"

    try:
        with open(filename, 'w') as f:
            f.write(adi_content)
    except Exception as e:
        return f"Error al escribir el archivo ADIF: {e}"

    return send_file(filename, as_attachment=True)

if __name__ == '__main__':
    app.run(host='0.0.0.0', debug=True)
